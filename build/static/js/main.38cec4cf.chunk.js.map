{"version":3,"sources":["components/Editor.js","hooks/useLocalStorage.js","components/App.js","index.js"],"names":["Editor","displayName","language","value","onChange","useState","open","setOpen","className","type","onClick","prevOpen","icon","faMinusSquare","faPlusSquare","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHTML","css","setCSS","js","setJS","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAUe,SAASA,EAAT,GAA2D,IAA1CC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SAAW,EAC3CC,oBAAS,GADkC,mBAC7DC,EAD6D,KACvDC,EADuD,KAKrE,OACI,yBAAKC,UAAS,2BAAsBF,EAAO,GAAK,cAC5C,yBAAKE,UAAU,gBACVP,EACD,4BAAQO,UAAU,MAAMC,KAAK,SAASC,QAAS,kBAAKH,GAAQ,SAAAI,GAAQ,OAAKA,OACzE,kBAAC,IAAD,CAAiBC,KAAON,EAAOO,IAAgBC,QAGnD,kBAAC,aAAD,CACIN,UAAU,sBACVO,eAbZ,SAAsBC,EAAQC,EAAMd,GAChCC,EAASD,IAaDA,MAAOA,EACPe,QAAS,CACLC,cAAc,EACdC,MAAM,EACNC,KAAMnB,EACNoB,MAAO,UACPC,aAAa,MC5BlB,SAASC,EAAgBC,EAAKC,GAEzC,IAAMC,EAJK,eAIkBF,EAF0B,EAI7BpB,oBAAS,WAC/B,IAAMuB,EAAYC,aAAaC,QAAQH,GACvC,OAAgB,MAAbC,EAA2BG,KAAKC,MAAMJ,GACd,oBAAjBF,EACCA,IAEAA,KAVwC,mBAIhDvB,EAJgD,KAIzC8B,EAJyC,KAkBvD,OAJAC,qBAAU,WACNL,aAAaM,QAAQR,EAAaI,KAAKK,UAAUjC,MAClD,CAACwB,EAAaxB,IAEV,CAACA,EAAO8B,GCmBJI,MArCf,WAAgB,IAAD,EACWb,EAAgB,OAAQ,IADnC,mBACNc,EADM,KACAC,EADA,OAESf,EAAgB,MAAO,IAFhC,mBAENgB,EAFM,KAEDC,EAFC,OAGOjB,EAAgB,KAAM,IAH7B,mBAGNkB,EAHM,KAGFC,EAHE,OAIetC,mBAAS,IAJxB,mBAINuC,EAJM,KAIEC,EAJF,KAsBb,OAfAX,qBAAU,WACR,IAAMY,EAAUC,YAAW,WACzBF,EAAU,iCAAD,OAECP,EAFD,mCAGEE,EAHF,qCAIGE,EAJH,wCAOR,KAEH,OAAO,kBAAMM,aAAaF,MACzB,CAACR,EAAME,EAAKE,IAIb,+BACE,yBAAKlC,UAAU,iBACb,kBAACR,EAAD,CAAQE,SAAS,MAAMD,YAAY,OAAOE,MAAOmC,EAAMlC,SAAUmC,IACjE,kBAACvC,EAAD,CAAQE,SAAS,MAAMD,YAAY,MAAME,MAAOqC,EAAKpC,SAAUqC,IAC/D,kBAACzC,EAAD,CAAQE,SAAS,aAAaD,YAAY,KAAKE,MAAOuC,EAAItC,SAAUuC,KAGtE,yBAAKnC,UAAU,QACf,4BAAQoC,OAAQA,EAAQK,MAAM,SAASC,QAAQ,gBAAgBC,YAAY,IAAIC,MAAM,OAAOC,OAAO,YC9BzGC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.38cec4cf.chunk.js","sourcesContent":["import React, { useState }from 'react'\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/elegant.css'\nimport 'codemirror/mode/xml/xml'\nimport 'codemirror/mode/css/css'\nimport 'codemirror/mode/javascript/javascript'\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMinusSquare, faPlusSquare} from '@fortawesome/free-solid-svg-icons'\n\nexport default function Editor({displayName, language, value, onChange}) {\n    const [ open, setOpen ] = useState(true);\n    function handleChange(editor, data, value){\n        onChange(value)\n    }\n    return (\n        <div className={`editor-container ${open ? '' : 'collapsed'}`}>\n            <div className=\"editor-title\">\n                {displayName}\n                <button className=\"btn\" type=\"button\" onClick={()=> setOpen(prevOpen => !prevOpen)}>\n                <FontAwesomeIcon icon={ open ? faMinusSquare : faPlusSquare}/>\n                </button>\n            </div>\n            <ControlledEditor\n                className=\"code-mirror-wrapper\"\n                onBeforeChange={handleChange}\n                value={value}\n                options={{\n                    lineWrapping: true,\n                    lint: true,\n                    mode: language,\n                    theme: 'elegant',\n                    lineNumbers: true,\n                }}\n            />\n        </div>\n    )\n}\n","import { useEffect, useState } from 'react'\n\nconst PREFIX = 'code-viewer-'\n\nexport default function useLocalStorage(key, initialValue) {\n\n    const prefixedKey = PREFIX + key\n\n    const [value, setValue] = useState(()=>{\n        const jsonValue = localStorage.getItem(prefixedKey);\n        if(jsonValue != null ) return JSON.parse(jsonValue);\n        if(typeof initialValue === 'function' ){\n            return initialValue();\n        } else {\n            return initialValue\n        }\n    });\n\n    useEffect(()=>{\n        localStorage.setItem(prefixedKey, JSON.stringify(value))\n    }, [prefixedKey, value]);\n\n    return [value, setValue]\n}\n","import React, { useState, useEffect } from 'react';\nimport Editor from './Editor';\nimport useLocalStorage from '../hooks/useLocalStorage'\n\nfunction App() {\n  const [html, setHTML] = useLocalStorage('html', '');\n  const [css, setCSS] = useLocalStorage('css', '');\n  const [js, setJS] = useLocalStorage('js', '');\n  const [srcDoc, setSrcDoc] = useState('');\n\n\n  useEffect(() => {\n    const timeout = setTimeout(()=>{\n      setSrcDoc(`\n      <html>\n        <body>${html}</body>\n        <style>${css}</style>\n        <script>${js}</script>\n      </html>\n      `)\n    }, 1000)\n\n    return () => clearTimeout(timeout)\n  }, [html, css, js])\n\n\n  return (\n    <panes>\n      <div className=\"pane top-pane\">\n        <Editor language=\"xml\" displayName=\"HTML\" value={html} onChange={setHTML}/>\n        <Editor language=\"css\" displayName=\"CSS\" value={css} onChange={setCSS}/>\n        <Editor language=\"javascript\" displayName=\"JS\" value={js} onChange={setJS}/>\n\n      </div>\n      <div className=\"pane\">\n      <iframe srcDoc={srcDoc} title=\"output\" sandbox=\"allow-scripts\" frameBorder=\"0\" width=\"100%\" height=\"100%\"/>\n      </div>\n    </panes>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}